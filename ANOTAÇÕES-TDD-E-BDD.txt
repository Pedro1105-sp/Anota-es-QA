		### Desenvolvimento Orientado a Testes e Comportamento (TDD/BDD) ###
		
	# A IMPORTÂNCIA DOS TESES
	- VOCÊ PRECISA "TESTAR O SOFTWARE" PARA SABER SE ELE FUNCIONA.
	- OS TESTES LEVAM A UM SISTEMA MAIS ROBUSTO E RESILIENTE A FALHAS.
	- VOCÊ SÓ PODE TESTAR O QUE SABE.
	
	- OS TESTES EVITAM FUTURAS QUEBRAS DE CÓDIGO E PROBLEMAS DE COMPATIBILIDADE.
	- OS TESTES REDUZEM O TEMPO GERAL DE DESENVOLVIMENTO.
	- OS TESTES GARANTE QUE SEU CÓDIGO SE COMPORTE CONFORME ESPERADO QUANDO OUTROS O USAREM.

	# NIVEÍS DE TESTES E CICLOS DE LANÇAMENTOS
		* 1º NÍVEL:
			= TESTES UNITÁRIOS - É UM NÍVEL INFERIOR DE TESTES
				. VOCÊ TESTA UNIDADES OU COMPONENTES INDIVIDUAIS DE UM SISTEMA DE SOFTWARE.
				. O OBJETIVO DESSE TESTE É VALIDAR SE CADA UNIDADE FUNCIONA CONFORME PROJETADO.
				. REQUER CONHECIMENTO PROFUNDO DE COMO O MÓDULO FUNCIONA.
				. ESTE É O NÍVEL NO QUAL VOCÊ EXECUTA O "DESENVOLVIMENTO ORIENTADO A TESTES".
				. ESTÁ NO AMBIENTE DE DESENVOLVIMENTO.
		* 2º NÍVEL:
			= TESTES DE INTEGRAÇÃO - É UM NÍVEL SUPERIOR DE TESTES
				. VOCÊ COMBINA UNIDADES INDIVIDUAIS E TESTA ELAS COMO UM GRUPO.
				. O OBJETIVO DESTE TESTE É EXPOR FALHAS NA INTERAÇÃO ENTRE UNIDADES INTEGRADAS.
				. VOCÊ TESTA VÁRIOS MÓDULOS PARA GARANTIR QUE ELES FUNCIONEM JUNTOS E VER COMO ELES SE COMPORTAM COM VÁRIAS ENTRADAS.
				. VOCÊ NÃO SABE NADA SOBRE FUNCIONAMENTO INTERNO DESSES MÓDULOS.
				. ESTE NÍVEL EM QUE VOCÊ EXECUTA O DESENVOLVIMENTO ORIENTADO AO COMPORTAMENTO.
		* 3º NÍVEL:
			= TESTES DE SISTEMAS - É UM NÍVEL SUPERIOR DE TESTES
				. VOCÊ TESTA O SISTEMA COMPLETO E INTEGRADO.
				. O OBJETIVO É AVALIAR A CONFORMIDADE DO SISTEMA COM OS REQUISITOS ESPECÍFICOS E PARA GARANTIR QUE TODO O SISTEMA FUNCIONE EM CONJUNTO.
				. ESTE É O NÍVEL QUE VOCÊ MONTA TODO O SISTEMA.
				. ESTÁ NO AMBIENTE DE TESTE OU PRÉ-PRODUÇÃO, POIS ESTÁ GARANTINDO QUE TODO O SISTEMA FUNCIONE EM CONJUNTO.
		* 4º NÍVEL:
			= TESTES DE ACEITAÇÃO - É UM NÍVEL SUPERIOR DE TESTES
				. O SISTEMA É TESTADO QUANTO À ACEITABILIDADE.
				. O OBJETIVO DESTE TESTE É AVALIAR A CONFORMIDADE DO SISTEMA COM OS REQUISITOS DE NEGÓCIO E AVALIAR SE É ACEITAVÉL PARA ENTREGA.
				. É TESTADO PELO USUÁRIO FINAL.
				. ESTÁ NO MESMO AMBIENTE OU AMBIENTE SEMELHANTE AO TESTE DE SISTEMA, OU PODE SER UM AMBIENTE ESPECIAL AO QUAL APENAS O USUÁRIO TEM ACESSO.
				
	
	# AMBIENTE AO LONGO DO CICLO DE LANÇAMENTO
		* AMBIENTE DE DESENVOLVIMENTO:
			- É ONDE OS DESENVOLVEDORES FAZEM SEUS TESTES UNITÁRIOS E ARMAZENAM SEU CÓDIGO EM UM SISTEMA DE GERENCIAMENTO DE CÓDIGO-FONTE COMO O GIT.
			- HÁ UM AMBIENTE DE CONSTRUÇÃO PARA COMPILAR ARTEFATOS DE CÓDIGO E TESTES UNITÁRIOS ADICIONAIS.
			- DEPOIS QUE ESSES ARTEFATOS FOREM CONSTRUÍDOS, ELES PODERÃO SER ARMAZENADOS EM UM RESPOSITÓRIO DE PACOTES.
			- É AQUI QUE SEUS ARQUIVOS jar JAVA, PYTHON, IMAGENS DOCKER... SERIAM ARMAZENADOS.
		* AMBIENTE DE TESTE: - > staging: PREPARAÇÃO
			- É LEVADO ESSES ARTEFATOS DE CONSTRUÇÃO COMO jars OU PACOTES E IMPLANTÁ-LOS EM TESTE, ESTÁGIO E PRODUÇÃO.
	
	
	# TDD and BDD
		
		* BDD (DESENVOLVIMENTO ORIENTADO POR COMPORTAMENTO)
			- CONCENTRA-SE NO COMPORTAMENTO DO "SISTEMA OBSERVADO DE FORA", NÃO AS MINÚNCIAS DE COMO O SISTEMA FUNCIONA POR DENTRO.
			- É ÓTIMOS PARA TESTES DE INTEGRAÇÃO PARA VERIFICAR SE TODOS OS COMPONENTES ESTÃO SE COMPORTANDO JUNTOS.
				- VOCÊ IMPLEMENTA APENAS OS COMPORTAMENTOS QUE CONTRIBUEM MAIS DIRETAMENTE AOS RESULTADOS DE NEGÓCIOS.
			- VANTAGEM:
				. É DESCREVER COMPORTAMENTOS EM UMA ÚNICA SINTAXE, UMA SINTAXE QUE OS ESPECIALISTAS DO DOMINIO, TESTADORES, DESENVOLVEDORES
					E CLIENTES PODEM ENTENDER FACILMENTE. ISSO MELHORA TODA A COMUNICAÇÃO COM A EQUIPE.
			- É USADO PARA TESTES DE "INTEGRAÇÃO E ACEITAÇÃO".
			- É TESTADO O COMPORTAMEMTO EXTERNO DO SISTEMA, OLHA PARA O SISTEMA COM A PERSPECTIVA DO CONSUMIDOR.
			- GARANTE QUE TODOS TRABALHEM JUNTOS EM UM NÍVEL SUPERIOR.
				- GARANTE QUE VOCÊ ESTÁ CONSTRUINDO A COISA CERTA.
			*** É PARA UM NÍVEL SUPERIOR DE TESTES ***
-------	AMBOS SE COMPLEMENTAM DURANTE TODO O CLICO DE VIDA DO DESENVOLVIMENTO ------------
		* TDD (DESENVOLVIMENTO ORIENTADO A TESTES)
			- CONCENTRA-SE EM COMO O "SISTEMA FUNCIONA POR DENTRO".
			- SIGNIFICA QUE SEUS TESTES ORIENTAM O DESIGN E O DESENVOLVIMENTO DO SEU CÓDIGO.
			- VOCÊ ESCREVE OS TESTES PRIMEIRO PARA O CÓDIGO QUE DESEJA TER E DEPOIS ESCREVE O CÓDIGO PARA FAZER OS TESTES PASSAREM.
			- CASOS DE TESTES DESCREVE O COMPORTAMENTO QUE VOCÊ DESEJA QUE O CÓDIGO TENHA.
				. ISSO MANTÉM VOCÊ FOCADO NO PROPÓSITO DO CÓDIGO, OU SEJA, NO QUE ELE DEVE FAZER.
			- DEVE SER ABSOLUTAMENTE CAPAZ DE ESPECIFICAR ISSO ANTES E COMEÇAR A ESCREVER QUALQUER CÓDIGO.
			- É USADO PARA TESTES DE "UNITÁRIOS".
			- É TESTADO AS FUNÇÕES DENTRO DO SISTEMA.
			- É GARATIR QUE CADA COMPONENTE ESTEJA FUNCIONANDO CORRETAMENTE.
				 - GARANTE QUE VOCÊ ESTÁ CONSTRUINDO TUDO CERTO.
			*** É PARA UM NÍVEL INFERIOR DE TESTE ***
			
	
	# ESTUDO DE CASO DE TESTE
		- CASO DE TESTE:
			. É UM TRECHO DE CÓDIGO QUE, DADA ALGUMA ENTRADA CONHECIDA, COMO DADOS DE AMOSTRA, VOCÊ PODE USAR PARA CHAMAR SEU CÓDIGO E TESTAR
				ALGUMA SAÍDA ESPERADA.
			. VOCÊ USA CASO DE TESTE PARA GARANTIR QUE O CÓDIGO FUNCIONE CORRETAMENTE.
			. OS DESENVOLVEDORES USAM CASOS DE TESTES PARA GARANTIR QUE SEU CÓDIGO FUNCIONE CORRETAMENTE.
			. OS CASOS DE TESTES AJUDAM OS DESENVOLVEDORES A IDENTIFICAR E CORRIGIR PARTES DE SEU CÓDIGO QUE PODEM FALHAR.
			
	
	
	# BENEFÍCIOS DO DESENVOLVIMENTO ORIENTADO A TESTES 
		
		- TDD:
			. SIGNIFICA QUE SEU TESTE UNITÁRIO, ORIENTAM O DESIGN NO CÓDIGO QUE VOCÊ ESTÁ DESENVOLVENDO.
			. VOCÊ ESCREVE PRIMEIRO O CASO DE TESTE PARA O CÓDIGO QUE VOCÊ GOSTARIA DE TER, ENTÃO DEVE ESCREVER O CÓDIGO PARA FAZER O CASO DE TESTES PASSAR.
			. MANTÉM FOCADO NO PRÓPOSITO DO CÓDIGO.
			. ORIENTA O DESIGN DO CÓDIGO.
		
		- FLUXO DE TRABALHO BÁSICO PARA O "TDD"
			. RED (FAIL)
				* ESCREVA UM CASO DE TESTE COM FALHA PARA O CÓDIGO QUE VOCÊ GOSTARIA DE TER.
			
			. GREEN (PASS)
				* ESCREVA CÓDIGO SUFUCIENTE PARA FAZER O CASO DE TESTE PASSAR.
			
			. REFACTOR (REFATORAR)
				* REFATORA O CÓDIGO PARA MELHORAR A QUALIDADE.
				
		- TDD ECONOMIZA TEMPO DE DESENVOLVIMENTO E GARANTE QUE O CÓDIGO FUNCIONE CONFORME O ESPERADO.
		
		- PARA CRIAR UM PIPELINE DEVOPS -> VOCÊ DEVE AUTOMATIZAR TODOS OS TESTES.
				
				
	# FERRAMENTAS PARA TDD
		. xUNIT - SERIES
		. JUNIT - JAVA
		. PYUNIT - PYTHON
		. PYTEST - PYTHON
		. DOCTEST - PYTHON
		. RSPEC - PYTHON/RUBY
		. NOSE - PYTHON -> É UM EXECUTOR DE TESTES
		. NUNIT - .NET
		. EMBUNIT - C/C++
		. JASMINE - JAVASCRPIT
		. MOCHA - NODE.JS
		. SIMPLETEST - PHP
		

	# ANATOMIA DE UM CASO DE TESTE
		. OS ACESSÓRIOS DE TESTE AJUDAM OS DESENVOLVEDORES A CRIAR UM ESTADO DE TESTE INCIAL.
		. AS ESTRUTURAS DE TESTE FORNECEM FERRAMENTAS QUE SIMPLIFICAM AS CONDIÇÕES DE TESTE.
		. OS CASOS DE TESTES INCLUEM ASSERÇÕES QUE VERIFICAM SE O CÓDIGO SE COMPORTA CONFORME O ESPERADO.
		
	
	# ESCREVENDO AFIRMAÇÕES DE TESTE
		. UMAS ASSERÇÃO DE TESTE É UMA AFIRMAÇÃO AVALIADA COMO VERDADEIRO E FALSO.
		. USAMOS ASSERÇÕES COMO VERIFICAÇÕES PARA DETERMINAR SE OS RESULTADOS DO NOSSO TESTE FORAM APROVADOS OU REPROVADOS:
			VERDADEIRO -> SIGNIFICA APROVADO 
			FALSO -> SIGNIFICA FALHADO
		. O BOM DAS AFIRMAÇÕES É QUE ELES GERARÃO UMA EXCEÇÃO SE FOREM AVALIADOS COMO FALSE, MARCADO O TESTE COMO REPROVADO.
		. AS ASSERÇÕES SÃO VERIFICAÇÕES PARA DETERMINAR SE OS TESTES FORAM APROVADOS OU REPROVADOS.
		. CAMINHOS FELIZES VERIFICAM SE UMA FUNÇÃO RETORNA RESULTADOS POSITIVOS QUANDO ESPERADO.
		. OS CAMINHOS TRISTES VERIFICAM SE UMA FUNÇÃO RESPONDE ÀS EXCEÇÕES DE MANEIRA ADEQUADA E SEM INTERRUPÇÃO.
		
	
	# EQUIPAMENTOS DE TESTE -> fixtures É EQUIPAMENTOS
		. OS EQUIPAMENTOS DE TESTE ESTABELECEM UM VALOR INICIAL CONHECIDO:
			ESTADO ANTES E DEPOIS DE CADA TESTE.
		. OS ACESSÓRIOS DE TESTE SÃO ÚTEIS PARA MUITOS TESTES.
		. OS EQUIPAMENTOS DE TESTE OPERAM EM TRÊS NÍVEIS DE ESPECIFIDADE: MÓDULO, CASO DE TESTE E TESTE.
		
	
	# COBERTURA DE TESTES
		. QUANTO MAIOR A COBERTURA DE TESTE, MAIS CONFIANTES OS DESENVOLVEDORES PODEM TER DE QUE SEU CÓDIGO FUNCIONA CONFORME O ESPERADO.
		. RELATÓRIOS DE COBERTURA DE TESTE AUSENTES PODEM AJUDAR OS DESENVOLVEDORES A IDENTIFICAR LINHAS DE CÓDIGO QUE AINDA PRECISAM DE CASOS DE TESTE.
	
	# FABRICAS
		. AS FÁBRICAS GERAM FALSIFICAÇÕES SÃO ÚTEIS PARA CRIAR E MANTER UMA GRANDE QUANTIADE DE DADOS DE TESTE.
		. AS FÁBRICAS SE COMPORTAM COMO OBJETOS REAIS DURANTE OS TESTES, ENTÃO OS DESENVOLVEDORES TESTAM AS FALSIFICAÇÕES COMO TESTAM DADOS REAIS.
		
	
	# MOCKING
		. É UM PROCESSO DE CRIAÇÃO DE OBJETOS QUE IMITAM O COMPORTAMEMTO DE OBJETOS REAIS.
		. OS DESENVOLVEDORES DEVEM SIMULAR SEMPRE QUE QUISEREM ISOLAR TESTES DE UM COMPONENTE REMOTO OU SISTEMA EXTERNO.
		
	# PATCHING
		. É UMA TÉCNICA DE SIMULAÇÃO PELA QUAL OS DESENVOLVEDORES ALTERAM O COMPORTAMENTO DE UMA CHAMADA FUNÇÃO. 
		
	# OBJETOS SIMULADOS
		. SÃO OBJETOS QUE IMITAM O COMPORTAMEMTO DE OBJETOS REAIS DE MANEIRAS QUE PODE CONTROLAR.
		
	# TDD	
		. O TDD MANTÉM VOCÊ FOCADO NOS REQUISITOS DO APLICATIVO ANTES DE ESCREVER UMA ÚNICA LINHA DE CÓDIGO.
		. O FLUXO DE TRABALHO TDD É UM PROCESSO DE IDA E VOLTA.
		
		
		
	# O QUE É DESENVOLVIMENTO ORIENTADO AO COMPORTAMENTO (BDD)?
		. CONCENTRA-SE NO COMPORTAMENTO DO SISTEMA. É OBSERVADO COMO O SISTEMA SE COMPORTA EXATAMENTE COM UM USUÁRIO DO SISTEMA FARIA.
		. FORÇA VOCÊ PENSAR DE FORA PARA DENTRO.
		. É QUE ELE DESCREVE COMPORTAMENTOS EM UMA ÚNICA SINTAXE QUE OS ESPECIALISTAS DO DOMINIO, TESTADORES, DESENVOLVEDORES E CLIENTES.
		. BDD É UM NÍVEL DE TESTE MAIS ALTO.
		
	# BENEFÍCIOS DO BDD
		. O BDD DESCREVE COMPORTAMENTOS EM UMA ÚNICA SINTAXE QUE ESPECIALISTAS DO DOMINIO, TESTADORES, DESENVOLVEDORES E PARTES INTERESSADAS PODEM	
			ENTENDER FACILMENTE.
		. COM AS FERRAMENTAS BDD, VOCÊ PODE BASEAR-SE EM ESPECIFICAÇÕES PARA GERAR DOCUMENTAÇÃO E TESTES.
		
	
	# FLUXO DE TRABALHO BDD E SINTAXE GHERKIN
		- FLUXO DE TRABALHO BDD
			. TESTADORES, DESENVOLVEDORES E PARTES INTERESSADAS EXPLORAM O DOMINIO DO PROBLEMA PARA GARANTIR QUE TODOS ENTENDAM E COLABORA PARA 
				PROUZIR EXEMPLOS CONCRETOS, OU CENÁRIOS, QUE DESCREVAM O COMPORTAMENTO QUE DESEJAM.
				
		- LINGUAGEM DE ESCRITA DE CENÁRIOS - SINTAXE GHERKIN
		  * PALAVRAS-CHEVES
			. GIVEN: DADO -> É UM CONJUNTO DE PRÉ-CONDIÇÕES 
			. WHEN: QUANDO -> QUANDO OCORRE UM EVENTO, ESSES EVENTOS SÃO AÇÕES
			. THEN: ENTÃO -> É O RESULTADO ESPERADO DA AÇÃO QUE O USUÁRIO EXECUTA
			. AND: E -> VOCÊ USA PARA SUBSTITUIR CADA PALAVRA-CHAVE REPETIDA APÓS A PRIMEIRA ETAPA
			. BUT: MAS -> É APENAS UMA OPÇÃO EXTRA PARA MELHORAR A LEGIBILIDADE
			
			. FEATURE: FUNCIONALIDADE
				. DEPOIS DA FEATURE VEM A HISTÓRIA DO USUÁRIO "AS A, I WANT, SO THAT"
			. SCENARIO: CENÁRIO -> É UMA SITUAÇÃO QUE DESCREVE UM ÚNICO COMPORTAMENTO DE RECURSO
				CADA CENÁRIO FORMULA UM CASO DE TESTE COMPLETO PARA O COMPORTAMENTO
				
"CASO DE TESTE" -> É O CENÁRIO COMPLETO
			
	
	# FERRAMENTAS PARA O BDD
		TOOLS - FERRAMENTAS
			
			. CUCUMBER - RUBY/JAVA/.NET/WEB APPS
			. LETTUCE - PYTHON
			. BEHAVE - PYTHON
			. JBEHAVE - JAVA/C#/PYTHON/RUBY
			. CONCORDION - JAVA -> USAM OUTRAS SINTAXES DE ESPECIFICAÇÃO
			. DASPEC - JAVASCRPIT
			. JASMINE/YADDA - JAVASCRPIT
			. BEHAT - PHP
			. KAHLAN - PHP
			. SPEEFLOW - .NET
			. SPOCK - GROOVY
			
			
			
			
			
			
			
			
			
			### GLOSSÁRIO ###
	
	CI -> "INTEGRAÇÃO CONTÍNUA" são os testes executados no servidor de CI quando você integra seu código para avisar se algo quebrou.
	CD -> "ENTREGA CONTÍNUA"
			
		
		
			